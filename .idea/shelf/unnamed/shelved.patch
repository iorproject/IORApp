Index: src/main/java/GmailQuickstart.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java;\nimport gmailApiWrapper.*;\nimport org.apache.tika.Tika;\nimport org.apache.tika.metadata.Metadata;\n\nimport java.io.*;\nimport java.util.List;\n\npublic class GmailQuickstart {\n\n    private static final String USER = \"ior46800@gmail.com\";\n    private static Tika tikaParser = new Tika();  // for get the string from byte[]. external jar.\n    private static Metadata metadata = new Metadata();  // for get the string from byte[]. external jar.\n\n    public static void main(String[] args) {\n\n        tikaParser.setMaxStringLength(-1);\n\n        try {\n            IEmailApi emailApiWrapper = FactoryEmailApi.getEmailApiInstance(\"GmailApi\");\n            List<IEmailMessage> messages = emailApiWrapper.getMessages(USER);\n            for (IEmailMessage message : messages) {\n\n                if (message.getAttachments().size() > 0) {\n\n                    for (Attachment attachment : message.getAttachments()) {\n\n                        byte[] dataBytes = emailApiWrapper.getAttachmentBytes(attachment,\n                                USER, message);\n                        String data = getStringFromBytes(dataBytes);\n                        int x = 5;\n                    }\n                }\n\n            }\n        }\n        catch (Exception e) {\n\n            String error = e.getMessage();\n            int d = 4;\n        }\n\n    }\n\n    private static String getStringFromBytes(byte[] data) {\n\n        String content = null;\n        InputStream inputStream = new ByteArrayInputStream(data);\n        try {\n            content = tikaParser.parseToString(inputStream, metadata);\n            content = content.replaceAll(\"\\r\", \"\")\n                    .replaceAll(\"\\t\", \"\")\n                    .replaceAll(\"\\n +\", \"\\n\")\n                    .replaceAll(\"\\n+\", \"\\n\");\n        }\n        catch (Exception e) {\n\n        }\n\n        return content;\n\n    }\n\n}\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/GmailQuickstart.java	(revision d05e09e19fc19405ac2faefd1f6f6ceac7e726a8)
+++ src/main/java/GmailQuickstart.java	(date 1563614164743)
@@ -8,7 +8,7 @@
 
 public class GmailQuickstart {
 
-    private static final String USER = "ior46800@gmail.com";
+    private static final String USER = "omerblechman@gmail.com";
     private static Tika tikaParser = new Tika();  // for get the string from byte[]. external jar.
     private static Metadata metadata = new Metadata();  // for get the string from byte[]. external jar.
 
Index: src/gmailApiWrapper/GmailApiWrapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package gmailApiWrapper;\n\nimport com.google.api.client.auth.oauth2.Credential;\nimport com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;\nimport com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\nimport com.google.api.client.http.javanet.NetHttpTransport;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.client.util.Base64;\nimport com.google.api.client.util.StringUtils;\nimport com.google.api.client.util.store.FileDataStoreFactory;\nimport com.google.api.services.gmail.Gmail;\nimport com.google.api.services.gmail.GmailScopes;\nimport com.google.api.services.gmail.model.*;\nimport org.jsoup.Jsoup;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.security.GeneralSecurityException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class GmailApiWrapper implements IEmailApi {\n\n    private static final String APPLICATION_NAME = \"Gmail API Java Quickstart\";\n    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance(); //JacksonFactory.getDefaultInstance();\n    private static final String TOKENS_DIRECTORY_PATH = \"/tokens\";\n\n    /**\n     * Global instance of the scopes required by this quickstart.\n     * If modifying these scopes, delete your previously saved tokens/ folder.\n     */\n    private static final List<String> SCOPES = Arrays.asList(\"https://mail.google.com/\",\n            \"https://www.googleapis.com/auth/gmail.modify\", \"https://www.googleapis.com/auth/gmail.readonly\"\n            , GmailScopes.GMAIL_LABELS);\n    private static final String CREDENTIALS_FILE_PATH = \"credentials.json\";\n\n    private Gmail service;\n    private final NetHttpTransport HTTP_TRANSPORT;\n\n\n    public GmailApiWrapper() throws GeneralSecurityException, IOException {\n\n        HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();\n        service = new Gmail.Builder(HTTP_TRANSPORT, JSON_FACTORY, getCredentials(HTTP_TRANSPORT))\n                .setApplicationName(APPLICATION_NAME)\n                .build();\n    }\n\n    private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException {\n        // Load client secrets.\n        InputStream in = GmailApiWrapper.class.getResourceAsStream(CREDENTIALS_FILE_PATH);\n        if (in == null) {\n            throw new FileNotFoundException(\"Resource not found: \" + CREDENTIALS_FILE_PATH);\n        }\n        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));\n\n        // Build flow and trigger user authorization request.\n        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(\n                HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)\n                .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))\n                .setAccessType(\"offline\")\n                .build();\n        LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(8888).build();\n        return new AuthorizationCodeInstalledApp(flow, receiver).authorize(\"user\");\n    }\n\n\n    @Override\n    public List<IEmailMessage> getMessages(String userId) throws IOException{\n\n        List<IEmailMessage> results = new ArrayList<>();\n        List<Message> messages = getGmailMessages(userId);\n        for (Message m : messages) {\n            List<MessagePartHeader> headers = m.getPayload().getHeaders();\n\n            String subject = headers.stream().filter(h -> h.getName().equals(\"Subject\")).collect(Collectors.toList()).get(0).getValue();\n            String date = headers.stream().filter(h -> h.getName().equals(\"Date\")).collect(Collectors.toList()).get(0).getValue();\n            String from = headers.stream().filter(h -> h.getName().equals(\"From\")).collect(Collectors.toList()).get(0).getValue();\n            from = from.substring(from.indexOf('<') + 1, from.lastIndexOf('>'));\n\n            String body = getBody(m);\n            if (body != null) {\n                body = StringUtils.newStringUtf8(Base64.decodeBase64(body));\n                if (m.getPayload().getMimeType().equals(\"text/html\")) {\n                    body = Jsoup.parse(body).text();\n                }\n                String[] lines = body.replaceAll(\"\\r\", \"\").split(\"\\n\");\n            }\n            List<Attachment> attachments = getAttachments(m, service, userId);\n            results.add(new IorEmailMessage(m.getId(), subject\n                    , from, date, body, attachments));\n        }\n\n        return results;\n    }\n\n//    public static void main(String... args) throws IOException, GeneralSecurityException {\n//        // Build a new authorized API client service.\n//        final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();\n//        Gmail service = new Gmail.Builder(HTTP_TRANSPORT, JSON_FACTORY, getCredentials(HTTP_TRANSPORT))\n//                .setApplicationName(APPLICATION_NAME)\n//                .build();\n//\n//\n//        String user = \"me\";\n//        StringBuilder contentBuilder = new StringBuilder();\n//        String token = \"\";\n//\n//\n//        List<IEmailMessage> messages = getMessages(service, user);\n//        int ttt = 7;\n//\n//        }\n\n\n    private List<Message> getGmailMessages(String userId) throws IOException {\n\n\n        ListMessagesResponse response = service.users().messages().list(userId)\n                .setQ(\"newer_than:1d\").execute();\n\n        List<Message> messages = new ArrayList<>();\n        List<Message> fullMessages = new ArrayList<>();\n        while (response.getMessages() != null) {\n            messages.addAll(response.getMessages());\n            if (response.getNextPageToken() != null) {\n                String pageToken = response.getNextPageToken();\n                response = service.users().messages().list(userId)\n                        .setQ(\"newer_than:1d\").execute();\n            } else {\n                break;\n            }\n        }\n\n        for (Message message : messages) {\n\n            Message m = service.users().messages().get(userId, message.getId()).setFormat(\"full\").execute();\n            List<String> labels = m.getLabelIds();\n            if (!labels.contains(\"CATEGORY_SOCIAL\") && !labels.contains(\"CATEGORY_PROMOTIONS\")\n                    && !labels.contains(\"SENT\")) {\n                fullMessages.add(m);\n            }\n\n        }\n        return fullMessages;\n    }\n\n    private String getBody(Message message) {\n\n        String res = null;\n\n        if (message.getPayload().getBody().getData() != null) {\n            return message.getPayload().getBody().getData();\n        }\n\n        List<MessagePart> parts = message.getPayload().getParts();\n        if (parts != null) {\n            for (MessagePart part : parts) {\n                res = getBodyHelper(part);\n                if (res != null) {\n                    return res;\n                }\n\n            }\n        }\n        return res;\n    }\n\n    private String getBodyHelper(MessagePart part) {\n\n        String res = null;\n\n        if (part.getParts() != null) {\n\n            List<MessagePart> parts = part.getParts();\n            for (MessagePart part1 : parts) {\n\n                res = getBodyHelper(part1);\n                if (res != null) {\n                    return res;\n                }\n            }\n        } else {\n\n            if(part.getBody().getData() != null) {\n                res = part.getBody().getData();\n            }\n\n        }\n\n        return res;\n    }\n\n    private List<Attachment> getAttachments(Message message, Gmail service, String userId) {\n\n        List<Attachment> attachments = new ArrayList<>();\n        String messageId = message.getId();\n\n        if (message.getPayload() != null && message.getPayload().getParts() != null) {\n            List<MessagePart> parts = message.getPayload().getParts();\n            for (MessagePart part : parts) {\n                getAttachmentsHelper(part, service, userId, messageId, attachments);\n            }\n        }\n\n        return attachments;\n    }\n\n\n    private void getAttachmentsHelper(MessagePart part, Gmail service, String userId, String messageId, List<Attachment> attachments) {\n\n        if (part.getParts() != null) {\n\n            List<MessagePart> parts = part.getParts();\n            for (MessagePart part1 : parts) {\n\n                getAttachmentsHelper(part1, service, userId, messageId, attachments);\n            }\n        }\n        else {\n\n            if (part.getFilename() != null && part.getFilename().length() > 0) {\n                String filename = part.getFilename();\n                String attId = part.getBody().getAttachmentId();\n                String fileName = part.getFilename();\n                FileFormat type = FileFormat.valueOf(fileName.substring(fileName.lastIndexOf(\".\") + 1).toUpperCase());\n                attachments.add(new Attachment(fileName, attId, type));\n            }\n        }\n    }\n\n    @Override\n    public byte[] getAttachmentBytes(Attachment attachment, String userId, IEmailMessage message) {\n\n        MessagePartBody attachPart = null;\n        try {\n            attachPart = service.users().messages().attachments().\n                    get(userId, message.getId(), attachment.getId()).execute();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        byte[] fileByteArray = Base64.decodeBase64(attachPart.getData());\n\n        return fileByteArray;\n    }\n\n\n    private byte[] getAttachmentData(String attId, Gmail service, String userId, String messageId) {\n\n        MessagePartBody attachPart = null;\n        try {\n            attachPart = service.users().messages().attachments().\n                    get(userId, messageId, attId).execute();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        byte[] fileByteArray = Base64.decodeBase64(attachPart.getData());\n\n        return fileByteArray;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/gmailApiWrapper/GmailApiWrapper.java	(revision d05e09e19fc19405ac2faefd1f6f6ceac7e726a8)
+++ src/gmailApiWrapper/GmailApiWrapper.java	(date 1563613986052)
@@ -5,6 +5,7 @@
 import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
 import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
 import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
 import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
 import com.google.api.client.http.javanet.NetHttpTransport;
 import com.google.api.client.json.JsonFactory;
@@ -17,14 +18,9 @@
 import com.google.api.services.gmail.model.*;
 import org.jsoup.Jsoup;
 
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
+import java.io.*;
 import java.security.GeneralSecurityException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
+import java.util.*;
 import java.util.stream.Collectors;
 
 public class GmailApiWrapper implements IEmailApi {
@@ -32,6 +28,10 @@
     private static final String APPLICATION_NAME = "Gmail API Java Quickstart";
     private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance(); //JacksonFactory.getDefaultInstance();
     private static final String TOKENS_DIRECTORY_PATH = "/tokens";
+    private static final String ACCESS_TOKEN="ya29.GlxLByUeM22BYo-TmzwSSC6LSCWH_4naMi3J_TkOngflJQIzM3jz7tZBtUesOPRvoK_X-KsrfoXnIXh7gSYg1IeHgEC9kr09-f1Tfi_AkLywNSZfmqseuRLXJESZUg";
+    private static final String REFRESH_TOKEN="1/l60RQ1WQINlbcsDvmONwDPiTjt88lWx29BvSwdaJJw8";
+    private static final String CLIENT_SECRET="6C2okEplSBNFI8CQ9sr_m6gO";
+    private static final String CLIENT_ID="745146810127-qr5uhgmubru7mv835ftqb28mh9onerrh.apps.googleusercontent.com";
 
     /**
      * Global instance of the scopes required by this quickstart.
@@ -49,9 +49,12 @@
     public GmailApiWrapper() throws GeneralSecurityException, IOException {
 
         HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
-        service = new Gmail.Builder(HTTP_TRANSPORT, JSON_FACTORY, getCredentials(HTTP_TRANSPORT))
+        if(ACCESS_TOKEN != null){
+        /*service = new Gmail.Builder(HTTP_TRANSPORT, JSON_FACTORY, getCredentials(HTTP_TRANSPORT))
                 .setApplicationName(APPLICATION_NAME)
-                .build();
+                .build();*/
+        }
+        performRequest(HTTP_TRANSPORT,CLIENT_ID,CLIENT_SECRET,ACCESS_TOKEN,REFRESH_TOKEN);
     }
 
     private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException {
@@ -73,6 +76,20 @@
     }
 
 
+    private void performRequest(final NetHttpTransport HTTP_TRANSPORT, String clientId, String clientSecret,String accessToken, String refreshToken) throws IOException {
+        Credential c = new GoogleCredential.Builder()
+                .setJsonFactory(JSON_FACTORY)
+                .setTransport(HTTP_TRANSPORT)
+                .setClientSecrets(clientId,clientSecret)
+                .build();
+        c.setAccessToken(accessToken);
+        c.setRefreshToken(refreshToken);
+        service = new Gmail.Builder(HTTP_TRANSPORT,JSON_FACTORY,c)
+                .setApplicationName(APPLICATION_NAME)
+                .build();
+    }
+
+
     @Override
     public List<IEmailMessage> getMessages(String userId) throws IOException{
 
@@ -120,10 +137,10 @@
 //
 //        }
 
-
     private List<Message> getGmailMessages(String userId) throws IOException {
 
-
+//        Credential c = ((Credential) service.getRequestFactory().getInitializer());
+//        String s = c.getAccessToken();
         ListMessagesResponse response = service.users().messages().list(userId)
                 .setQ("newer_than:1d").execute();
 
